	<%@ page language="java" contentType="text/html; charset=EUC-KR"
	    pageEncoding="EUC-KR"%>
	<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	
	<!-- services 라이브러리 불러오기 -->
	<script type="text/javascript" src="//apis.daum.net/maps/maps3.js?apikey=724958f2e1f7b67c37acebb26e173723&libraries=services"></script>
	
	<!-- 지도생성 -->
	<div class="map_wrap">
	    <div id="map" style="width:100%;height:100%;position:relative;overflow:hidden;"></div>
	
	    <div id="menu_wrap" class="bg_white">
	        <div class="option">
	            <p>
	                <form onsubmit="searchPlaces(); return false;">
	                키워드 : <input type="text" value="${keyword}" id="keyword" size="15"> 
	                <button type="submit">검색하기</button> 
	            </p>
	        </div>
	        <hr>
			<!--UL=순서없는 목록 태그-->
	        <ul id="placesList"></ul>
	        <div id="pagination"></div>
	    </div>
	</div>

<script>
// 마커를 담을 배열입니다
var markers = [];
                        
// array for searchResult
var searchResult = [];
                        
			var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
			   	mapOption = {
			    center: new daum.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표
			    level: 3 // 지도의 확대 레벨
				};  

			// 지도를 생성합니다    
			var map = new daum.maps.Map(mapContainer, mapOption); 
// 장소 검색 객체를 생성합니다
var ps = new daum.maps.services.Places();  
// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
var infowindow = new daum.maps.InfoWindow({zIndex:1});

// 키워드로 장소를 검색합니다
searchPlaces();
                        
   // 키워드 검색을 요청하는 함수입니다
   function searchPlaces() {
   		var keyword = document.getElementById('keyword').value;	
        if (!keyword.replace(/^\s+|\s+$/g, '')) {
        alert('키워드를 입력해주세요!');
        return false;
        }
       // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
       // [API메소드]keywordSearch(keyword, callback, options) (검색키워드,결과를 받을 콜백함수,옵션)
       // keyword로 검색하면 placesSearchCB의 함수형태로 결과를 받는다.
       ps.keywordSearch(keyword, placesSearchCB); 
   }

   // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
   function placesSearchCB(status, data, pagination) {
   		//[API.라이브러리]daum.maps.services.Status.OK=검색결과 있음.
        if (status === daum.maps.services.Status.OK) {
           // 정상적으로 검색이 완료됐으면
           // 검색 목록과 마커를 표출합니다
           displayPlaces(data.places);
           // 페이지 번호를 표출합니다
           displayPagination(pagination);
       	} else if (status === daum.maps.services.Status.ZERO_RESULT) {
          	alert('검색 결과가 존재하지 않습니다.');
         	return;
        } 
    }

    // 검색 결과 목록과 마커를 표출하는 함수입니다
    function displayPlaces(places) {
        //이 문서내에서 id값이 placesList인 요소를 가져와 listEl변수에 넣겠다.
		var listEl = document.getElementById('placesList'),  
    		menuEl = document.getElementById('menu_wrap'),
    		fragment = document.createDocumentFragment(), 
        //좌표계의 사각영역 정보를 표현하는 객체를 생성한다.
			bounds = new daum.maps.LatLngBounds(), 
    		listStr = '';
        //이전 검색의 결과 목록을 제거합니다
            removeAllChildNods(listEl);
        //이전 검색의 마커를 제거합니다	
            removeMarker();

		for ( var i=0; i<places.length; i++ ) {
        // 마커를 생성하고 지도에 표시합니다
        	var placePosition = new daum.maps.LatLng(places[i].latitude, places[i].longitude),
            marker = addMarker(placePosition, i),
            //플레이스를 건들면 목록명을 가져오지 못한다.
            itemEl = getListItem(i, places[i], marker); // 검색 결과 항목 Element를 생성합니다

            // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
            // LatLngBounds 객체에 좌표를 추가합니다
            bounds.extend(placePosition);

           	// 마커와 검색결과 항목에 mouseover 했을때
            // 해당 장소에 인포윈도우에 장소명을 표시합니다
            // mouseout 했을 때는 인포윈도우를 닫습니다
            (function(marker, title) {
                daum.maps.event.addListener(marker, 'mouseover', function() {
                displayInfowindow(marker, title);
              	});
                                                			
           		daum.maps.event.addListener(marker, 'mouseout', function() {
                infowindow.close();
                });

                itemEl.onmouseover =  function () {
                displayInfowindow(marker, title);
                };

                itemEl.onmouseout =  function () {
                infowindow.close();
                };
                })(marker, places[i].title);

                fragment.appendChild(itemEl);
                }
                // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다
                listEl.appendChild(fragment);
                menuEl.scrollTop = 0;
                // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
                map.setBounds(bounds);
                }

     // 검색결과 항목을 Element로 반환하는 함수입니다
     function getListItem(index, places) {
     	var el = document.createElement('li'),
        	itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
            '<div class="info">' +
            '   <h5>' + places.title + '</h5>';

            if (places.newAddress) {
                itemStr += '    <span>' + places.newAddress + '</span>' +
                           '   <span class="jibun gray">' +  places.address  + '</span>';
            } else {
                itemStr += '    <span>' +  places.address  + '</span>'; 
            }

                itemStr += '  <span class="tel">' + places.phone  + '</span>' +
                   		   '</div>';           
				itemStr += '  <span class="x">' + places.latitude  + '</span>' +
                           '</div>'; 
                itemStr += '  <span class="y">' + places.longitude  + '</span>' +
                           '</div>'; 
                el.innerHTML = itemStr;
                el.className = 'item';

                return el;
      }

//마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
function addMarker(position, idx, title) {
var imageSrc = 'http://i1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
    imageSize = new daum.maps.Size(36, 37),  // 마커 이미지의 크기
    imgOptions =  {
        spriteSize : new daum.maps.Size(36, 691), // 스프라이트 이미지의 크기
        spriteOrigin : new daum.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
        offset: new daum.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표
    },
    markerImage = new daum.maps.MarkerImage(imageSrc, imageSize, imgOptions),
        marker = new daum.maps.Marker({
        position: position, // 마커의 위치
        image: markerImage 
    });

marker.setMap(map); // 지도 위에 마커를 표출합니다
markers.push(marker);  // 배열에 생성된 마커를 추가합니다

return marker;
}

//지도 위에 표시되고 있는 마커를 모두 제거합니다
function removeMarker() {
for ( var i = 0; i < markers.length; i++ ) {
    markers[i].setMap(null);
}   
markers = [];
}

//검색결과 목록 하단에 페이지번호를 표시는 함수입니다
function displayPagination(pagination) {
var paginationEl = document.getElementById('pagination'),
    fragment = document.createDocumentFragment(),
    i; 

// 기존에 추가된 페이지번호를 삭제합니다
while (paginationEl.hasChildNodes()) {
    paginationEl.removeChild (paginationEl.lastChild);
}

for (i=1; i<=pagination.last; i++) {
    var el = document.createElement('a');
    el.href = "#";
    el.innerHTML = i;

    if (i===pagination.current) {
        el.className = 'on';
    } else {
        el.onclick = (function(i) {
            return function() {
                pagination.gotoPage(i);
            }
        })(i);
    }

    fragment.appendChild(el);
}
paginationEl.appendChild(fragment);
}

//검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
//인포윈도우에 장소명을 표시합니다
function displayInfowindow(marker, title) {
var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';

infowindow.setContent(content);
infowindow.open(map, marker);
}

// 검색결과 목록의 자식 Element를 제거하는 함수입니다
function removeAllChildNods(el) {   
while (el.hasChildNodes()) {
    el.removeChild (el.lastChild);
}
}
</script>							
    														
    									